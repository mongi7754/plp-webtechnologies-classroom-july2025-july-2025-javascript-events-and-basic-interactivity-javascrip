<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Web Page with JavaScript</title>
    <style>
        /* Base styles */
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3a0ca3;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --success-color: #4bb543;
            --error-color: #ff3333;
            --transition: all 0.3s ease;
        }

        [data-theme="dark"] {
            --light-color: #212529;
            --dark-color: #f8f9fa;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            background-color: var(--light-color);
            color: var(--dark-color);
            transition: var(--transition);
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        header {
            text-align: center;
            margin-bottom: 40px;
            padding: 20px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        h1, h2, h3 {
            margin-bottom: 15px;
            color: var(--primary-color);
        }

        section {
            margin-bottom: 50px;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            background-color: rgba(255, 255, 255, 0.8);
        }

        [data-theme="dark"] section {
            background-color: rgba(33, 37, 41, 0.8);
        }

        /* Interactive elements styles */
        .interactive-controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .theme-toggle {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 30px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: var(--transition);
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 22px;
            width: 22px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: var(--transition);
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--primary-color);
        }

        input:checked + .slider:before {
            transform: translateX(30px);
        }

        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            transition: var(--transition);
            font-weight: 600;
        }

        button:hover {
            background-color: var(--secondary-color);
            transform: translateY(-2px);
        }

        .counter-container {
            text-align: center;
            margin: 20px 0;
            padding: 20px;
            border: 2px solid var(--primary-color);
            border-radius: 8px;
        }

        .counter-value {
            font-size: 3rem;
            font-weight: bold;
            margin: 20px 0;
            color: var(--primary-color);
        }

        .counter-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .counter-controls button {
            min-width: 120px;
        }

        /* FAQ section styles */
        .faq-container {
            margin-top: 20px;
        }

        .faq-item {
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            overflow: hidden;
        }

        .faq-question {
            padding: 15px;
            background-color: #f1f1f1;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 600;
        }

        [data-theme="dark"] .faq-question {
            background-color: #343a40;
        }

        .faq-question:hover {
            background-color: #e9ecef;
        }

        [data-theme="dark"] .faq-question:hover {
            background-color: #495057;
        }

        .faq-answer {
            padding: 0 15px;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease, padding 0.3s ease;
        }

        .faq-item.active .faq-answer {
            padding: 15px;
            max-height: 500px;
        }

        .faq-toggle {
            font-size: 1.2rem;
            transition: transform 0.3s ease;
        }

        .faq-item.active .faq-toggle {
            transform: rotate(45deg);
        }

        /* Form styles */
        .form-container {
            max-width: 600px;
            margin: 0 auto;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
        }

        input, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            transition: var(--transition);
        }

        input:focus, textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.2);
        }

        .error-message {
            color: var(--error-color);
            font-size: 0.9rem;
            margin-top: 5px;
            display: none;
        }

        .success-message {
            color: var(--success-color);
            font-size: 1rem;
            margin-top: 15px;
            text-align: center;
            display: none;
        }

        .form-actions {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .interactive-controls {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .counter-controls {
                flex-direction: column;
                align-items: center;
            }
            
            .counter-controls button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>ðŸ§  Interactive Web Page with JavaScript</h1>
            <p>Experience the power of JavaScript through interactive elements and form validation!</p>
        </header>

        <!-- Part 1: Interactive Controls -->
        <section id="interactive-controls">
            <h2>ðŸŽ® Interactive Controls</h2>
            <div class="interactive-controls">
                <div class="theme-toggle">
                    <span>Dark Mode:</span>
                    <label class="toggle-switch">
                        <input type="checkbox" id="theme-toggle">
                        <span class="slider"></span>
                    </label>
                </div>
                <button id="reset-button">Reset Counter</button>
            </div>
        </section>

        <!-- Part 2: Interactive Elements -->
        <section id="interactive-elements">
            <h2>ðŸŽ‰ Interactive Elements</h2>
            
            <!-- Counter -->
            <div class="counter-container">
                <h3>Counter Game</h3>
                <p>Click the buttons to change the counter value</p>
                <div class="counter-value" id="counter-value">0</div>
                <div class="counter-controls">
                    <button id="decrement-btn">Decrease</button>
                    <button id="increment-btn">Increase</button>
                </div>
            </div>

            <!-- FAQ Section -->
            <div class="faq-container">
                <h3>Frequently Asked Questions</h3>
                <div class="faq-item">
                    <div class="faq-question">
                        <span>What is JavaScript used for?</span>
                        <span class="faq-toggle">+</span>
                    </div>
                    <div class="faq-answer">
                        <p>JavaScript is a versatile programming language primarily used for creating interactive elements on websites. It can handle user interactions, manipulate page content, validate forms, create animations, and much more.</p>
                    </div>
                </div>
                <div class="faq-item">
                    <div class="faq-question">
                        <span>What are event listeners?</span>
                        <span class="faq-toggle">+</span>
                    </div>
                    <div class="faq-answer">
                        <p>Event listeners are functions in JavaScript that wait for specific events to occur (like clicks, key presses, or mouse movements) and then execute code in response. They're essential for creating interactive web pages.</p>
                    </div>
                </div>
                <div class="faq-item">
                    <div class="faq-question">
                        <span>What is form validation?</span>
                        <span class="faq-toggle">+</span>
                    </div>
                    <div class="faq-answer">
                        <p>Form validation is the process of ensuring that user input meets specific criteria before it's submitted. This helps prevent incorrect or malicious data from being processed and provides immediate feedback to users.</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Part 3: Form Validation -->
        <section id="form-validation">
            <h2>ðŸ“‹ Form Validation</h2>
            <div class="form-container">
                <form id="user-form">
                    <div class="form-group">
                        <label for="name">Full Name</label>
                        <input type="text" id="name" placeholder="Enter your full name">
                        <div class="error-message" id="name-error">Please enter a valid name (at least 2 characters)</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="email">Email Address</label>
                        <input type="email" id="email" placeholder="Enter your email">
                        <div class="error-message" id="email-error">Please enter a valid email address</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="password">Password</label>
                        <input type="password" id="password" placeholder="Enter your password">
                        <div class="error-message" id="password-error">Password must be at least 8 characters with uppercase, lowercase, and number</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="confirm-password">Confirm Password</label>
                        <input type="password" id="confirm-password" placeholder="Confirm your password">
                        <div class="error-message" id="confirm-password-error">Passwords do not match</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="message">Message (Optional)</label>
                        <textarea id="message" rows="4" placeholder="Enter your message"></textarea>
                    </div>
                    
                    <div class="form-actions">
                        <button type="submit">Submit Form</button>
                    </div>
                    
                    <div class="success-message" id="success-message">
                        Form submitted successfully!
                    </div>
                </form>
            </div>
        </section>
    </div>

    <script>
        // Part 1: JavaScript Event Handling and Interactive Elements
        
        // Theme toggle functionality
        document.addEventListener('DOMContentLoaded', function() {
            const themeToggle = document.getElementById('theme-toggle');
            const body = document.body;
            
            // Check for saved theme preference or default to light
            const savedTheme = localStorage.getItem('theme') || 'light';
            if (savedTheme === 'dark') {
                body.setAttribute('data-theme', 'dark');
                themeToggle.checked = true;
            }
            
            // Toggle theme when switch is clicked
            themeToggle.addEventListener('change', function() {
                if (this.checked) {
                    body.setAttribute('data-theme', 'dark');
                    localStorage.setItem('theme', 'dark');
                } else {
                    body.removeAttribute('data-theme');
                    localStorage.setItem('theme', 'light');
                }
            });
            
            // Counter functionality
            let counter = 0;
            const counterValue = document.getElementById('counter-value');
            const incrementBtn = document.getElementById('increment-btn');
            const decrementBtn = document.getElementById('decrement-btn');
            const resetBtn = document.getElementById('reset-button');
            
            // Update counter display
            function updateCounter() {
                counterValue.textContent = counter;
                
                // Change color based on value
                if (counter > 0) {
                    counterValue.style.color = 'var(--success-color)';
                } else if (counter < 0) {
                    counterValue.style.color = 'var(--error-color)';
                } else {
                    counterValue.style.color = 'var(--primary-color)';
                }
            }
            
            // Increment counter
            incrementBtn.addEventListener('click', function() {
                counter++;
                updateCounter();
            });
            
            // Decrement counter
            decrementBtn.addEventListener('click', function() {
                counter--;
                updateCounter();
            });
            
            // Reset counter
            resetBtn.addEventListener('click', function() {
                counter = 0;
                updateCounter();
            });
            
            // FAQ functionality
            const faqItems = document.querySelectorAll('.faq-item');
            
            faqItems.forEach(item => {
                const question = item.querySelector('.faq-question');
                
                question.addEventListener('click', function() {
                    // Toggle active class on clicked item
                    item.classList.toggle('active');
                    
                    // Close other open items
                    faqItems.forEach(otherItem => {
                        if (otherItem !== item && otherItem.classList.contains('active')) {
                            otherItem.classList.remove('active');
                        }
                    });
                });
            });
            
            // Part 3: Form Validation
            const form = document.getElementById('user-form');
            const nameInput = document.getElementById('name');
            const emailInput = document.getElementById('email');
            const passwordInput = document.getElementById('password');
            const confirmPasswordInput = document.getElementById('confirm-password');
            const successMessage = document.getElementById('success-message');
            
            // Validation functions
            function validateName() {
                const name = nameInput.value.trim();
                const nameError = document.getElementById('name-error');
                
                if (name.length < 2) {
                    nameError.style.display = 'block';
                    return false;
                } else {
                    nameError.style.display = 'none';
                    return true;
                }
            }
            
            function validateEmail() {
                const email = emailInput.value.trim();
                const emailError = document.getElementById('email-error');
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                
                if (!emailRegex.test(email)) {
                    emailError.style.display = 'block';
                    return false;
                } else {
                    emailError.style.display = 'none';
                    return true;
                }
            }
            
            function validatePassword() {
                const password = passwordInput.value;
                const passwordError = document.getElementById('password-error');
                const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/;
                
                if (!passwordRegex.test(password)) {
                    passwordError.style.display = 'block';
                    return false;
                } else {
                    passwordError.style.display = 'none';
                    return true;
                }
            }
            
            function validateConfirmPassword() {
                const password = passwordInput.value;
                const confirmPassword = confirmPasswordInput.value;
                const confirmPasswordError = document.getElementById('confirm-password-error');
                
                if (password !== confirmPassword) {
                    confirmPasswordError.style.display = 'block';
                    return false;
                } else {
                    confirmPasswordError.style.display = 'none';
                    return true;
                }
            }
            
            // Real-time validation
            nameInput.addEventListener('input', validateName);
            emailInput.addEventListener('input', validateEmail);
            passwordInput.addEventListener('input', function() {
                validatePassword();
                // Also validate confirm password when password changes
                if (confirmPasswordInput.value) {
                    validateConfirmPassword();
                }
            });
            confirmPasswordInput.addEventListener('input', validateConfirmPassword);
            
            // Form submission
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Validate all fields
                const isNameValid = validateName();
                const isEmailValid = validateEmail();
                const isPasswordValid = validatePassword();
                const isConfirmPasswordValid = validateConfirmPassword();
                
                // If all valid, show success message
                if (isNameValid && isEmailValid && isPasswordValid && isConfirmPasswordValid) {
                    successMessage.style.display = 'block';
                    
                    // Reset form after 3 seconds
                    setTimeout(function() {
                        form.reset();
                        successMessage.style.display = 'none';
                    }, 3000);
                }
            });
        });
    </script>
</body>
</html>



/* Interactive Web Page CSS */
/* This stylesheet contains all styles for the interactive JavaScript assignment */

/* CSS Variables for consistent theming */
:root {
    --primary-color: #4361ee;
    --secondary-color: #3a0ca3;
    --light-color: #f8f9fa;
    --dark-color: #212529;
    --success-color: #4bb543;
    --error-color: #ff3333;
    --warning-color: #ffcc00;
    --transition: all 0.3s ease;
    --border-radius: 8px;
    --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Dark theme variables */
[data-theme="dark"] {
    --light-color: #212529;
    --dark-color: #f8f9fa;
    --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
}

/* Reset and base styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    background-color: var(--light-color);
    color: var(--dark-color);
    transition: var(--transition);
    padding: 20px;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
}

/* Header styles */
header {
    text-align: center;
    margin-bottom: 40px;
    padding: 20px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

h1 {
    font-size: 2.5rem;
    margin-bottom: 15px;
    color: var(--primary-color);
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
}

h2 {
    font-size: 2rem;
    margin-bottom: 20px;
    color: var(--primary-color);
    border-bottom: 2px solid var(--primary-color);
    padding-bottom: 10px;
}

h3 {
    font-size: 1.5rem;
    margin-bottom: 15px;
    color: var(--secondary-color);
}

p {
    margin-bottom: 15px;
    font-size: 1.1rem;
}

/* Section styling */
section {
    margin-bottom: 50px;
    padding: 25px;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    background-color: rgba(255, 255, 255, 0.8);
    transition: var(--transition);
}

[data-theme="dark"] section {
    background-color: rgba(33, 37, 41, 0.8);
}

/* Interactive controls section */
.interactive-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap;
    gap: 15px;
}

.theme-toggle {
    display: flex;
    align-items: center;
    gap: 10px;
    font-weight: 600;
}

/* Toggle switch styling */
.toggle-switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 30px;
}

.toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: var(--transition);
    border-radius: 34px;
}

.slider:before {
    position: absolute;
    content: "";
    height: 22px;
    width: 22px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: var(--transition);
    border-radius: 50%;
}

input:checked + .slider {
    background-color: var(--primary-color);
}

input:checked + .slider:before {
    transform: translateX(30px);
}

/* Button styles */
button {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 4px;
    cursor: pointer;
    transition: var(--transition);
    font-weight: 600;
    font-size: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

button:hover {
    background-color: var(--secondary-color);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}

button:active {
    transform: translateY(0);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
}

/* Counter styles */
.counter-container {
    text-align: center;
    margin: 30px 0;
    padding: 25px;
    border: 2px solid var(--primary-color);
    border-radius: var(--border-radius);
    background: linear-gradient(135deg, rgba(67, 97, 238, 0.1) 0%, rgba(255, 255, 255, 0.1) 100%);
}

.counter-value {
    font-size: 4rem;
    font-weight: bold;
    margin: 20px 0;
    color: var(--primary-color);
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    transition: var(--transition);
}

.counter-controls {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 20px;
}

.counter-controls button {
    min-width: 140px;
    font-size: 1.1rem;
}

/* FAQ section styles */
.faq-container {
    margin-top: 30px;
}

.faq-item {
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: var(--border-radius);
    overflow: hidden;
    transition: var(--transition);
}

.faq-item:hover {
    border-color: var(--primary-color);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.faq-question {
    padding: 18px;
    background-color: #f1f1f1;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: 600;
    transition: var(--transition);
}

[data-theme="dark"] .faq-question {
    background-color: #343a40;
}

.faq-question:hover {
    background-color: #e9ecef;
}

[data-theme="dark"] .faq-question:hover {
    background-color: #495057;
}

.faq-answer {
    padding: 0 18px;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.4s ease, padding 0.4s ease;
    background-color: white;
}

[data-theme="dark"] .faq-answer {
    background-color: #2d3439;
}

.faq-item.active .faq-answer {
    padding: 18px;
    max-height: 500px;
}

.faq-toggle {
    font-size: 1.5rem;
    font-weight: bold;
    transition: transform 0.3s ease;
    color: var(--primary-color);
}

.faq-item.active .faq-toggle {
    transform: rotate(45deg);
}

/* Form styles */
.form-container {
    max-width: 600px;
    margin: 0 auto;
}

.form-group {
    margin-bottom: 25px;
    position: relative;
}

label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: var(--dark-color);
}

input, textarea, select {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    transition: var(--transition);
    font-family: inherit;
}

input:focus, textarea:focus, select:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
}

textarea {
    resize: vertical;
    min-height: 120px;
}

/* Validation styles */
.form-group.valid input,
.form-group.valid textarea,
.form-group.valid select {
    border-color: var(--success-color);
}

.form-group.invalid input,
.form-group.invalid textarea,
.form-group.invalid select {
    border-color: var(--error-color);
}

.error-message {
    color: var(--error-color);
    font-size: 0.9rem;
    margin-top: 5px;
    display: none;
}

.form-group.invalid .error-message {
    display: block;
}

.success-message {
    color: var(--success-color);
    font-size: 1.1rem;
    margin-top: 20px;
    text-align: center;
    padding: 15px;
    background-color: rgba(75, 181, 67, 0.1);
    border-radius: var(--border-radius);
    display: none;
    animation: fadeIn 0.5s ease;
}

.form-actions {
    display: flex;
    justify-content: center;
    margin-top: 30px;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-10px); }
    60% { transform: translateY(-5px); }
}

.bounce {
    animation: bounce 1s;
}

/* Utility classes */
.text-center {
    text-align: center;
}

.mt-20 {
    margin-top: 20px;
}

.mb-20 {
    margin-bottom: 20px;
}

.hidden {
    display: none !important;
}

/* Responsive design */
@media (max-width: 768px) {
    body {
        padding: 15px;
    }
    
    h1 {
        font-size: 2rem;
    }
    
    h2 {
        font-size: 1.7rem;
    }
    
    section {
        padding: 20px;
    }
    
    .interactive-controls {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .counter-controls {
        flex-direction: column;
        align-items: center;
    }
    
    .counter-controls button {
        width: 100%;
    }
    
    .counter-value {
        font-size: 3rem;
    }
    
    .form-actions button {
        width: 100%;
    }
}

@media (max-width: 480px) {
    h1 {
        font-size: 1.8rem;
    }
    
    h2 {
        font-size: 1.5rem;
    }
    
    .counter-value {
        font-size: 2.5rem;
    }
    
    button {
        padding: 10px 20px;
        font-size: 0.9rem;
    }
}

/* Print styles */
@media print {
    button, .toggle-switch, .faq-toggle {
        display: none !important;
    }
    
    .faq-item.active .faq-answer {
        max-height: none;
        display: block;
    }
    
    section {
        box-shadow: none;
        border: 1px solid #ddd;
    }
}

// Interactive Web Page with JavaScript
// This script handles all interactive functionality for the assignment

// Wait for DOM to be fully loaded before executing scripts
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM fully loaded. Initializing interactive features...');
    
    // ============================================
    // PART 1: EVENT HANDLING AND INTERACTIVE ELEMENTS
    // ============================================
    
    // Theme Toggle Functionality
    // Allows users to switch between light and dark mode
    function initializeThemeToggle() {
        const themeToggle = document.getElementById('theme-toggle');
        const body = document.body;
        
        // Check for saved theme preference in localStorage or default to light
        const savedTheme = localStorage.getItem('theme') || 'light';
        console.log(`Saved theme preference: ${savedTheme}`);
        
        // Apply saved theme on page load
        if (savedTheme === 'dark') {
            body.setAttribute('data-theme', 'dark');
            themeToggle.checked = true;
            console.log('Dark theme applied');
        }
        
        // Add event listener for theme toggle changes
        themeToggle.addEventListener('change', function() {
            if (this.checked) {
                body.setAttribute('data-theme', 'dark');
                localStorage.setItem('theme', 'dark');
                console.log('Switched to dark theme');
            } else {
                body.removeAttribute('data-theme');
                localStorage.setItem('theme', 'light');
                console.log('Switched to light theme');
            }
        });
        
        console.log('Theme toggle initialized');
    }
    
    // Counter Functionality
    // Creates an interactive counter with visual feedback
    function initializeCounter() {
        let counter = 0;
        const counterValue = document.getElementById('counter-value');
        const incrementBtn = document.getElementById('increment-btn');
        const decrementBtn = document.getElementById('decrement-btn');
        const resetBtn = document.getElementById('reset-button');
        
        // Function to update counter display and apply visual styling
        function updateCounter() {
            counterValue.textContent = counter;
            
            // Change color based on counter value for visual feedback
            if (counter > 0) {
                counterValue.style.color = 'var(--success-color)';
                counterValue.classList.add('bounce');
                setTimeout(() => counterValue.classList.remove('bounce'), 1000);
            } else if (counter < 0) {
                counterValue.style.color = 'var(--error-color)';
                counterValue.classList.add('bounce');
                setTimeout(() => counterValue.classList.remove('bounce'), 1000);
            } else {
                counterValue.style.color = 'var(--primary-color)';
            }
            
            console.log(`Counter updated: ${counter}`);
        }
        
        // Event listeners for counter controls
        incrementBtn.addEventListener('click', function() {
            counter++;
            updateCounter();
        });
        
        decrementBtn.addEventListener('click', function() {
            counter--;
            updateCounter();
        });
        
        resetBtn.addEventListener('click', function() {
            counter = 0;
            updateCounter();
            console.log('Counter reset to 0');
        });
        
        // Initialize counter display
        updateCounter();
        console.log('Counter functionality initialized');
    }
    
    // FAQ Section Functionality
    // Creates collapsible FAQ items with smooth animations
    function initializeFAQ() {
        const faqItems = document.querySelectorAll('.faq-item');
        console.log(`Found ${faqItems.length} FAQ items`);
        
        // Add click event to each FAQ question
        faqItems.forEach((item, index) => {
            const question = item.querySelector('.faq-question');
            
            question.addEventListener('click', function() {
                console.log(`FAQ item ${index + 1} clicked`);
                
                // Toggle active class on clicked item
                const isActive = item.classList.contains('active');
                item.classList.toggle('active');
                
                // Close other open FAQ items (accordion behavior)
                if (!isActive) {
                    faqItems.forEach(otherItem => {
                        if (otherItem !== item && otherItem.classList.contains('active')) {
                            otherItem.classList.remove('active');
                            console.log(`Closed other FAQ item`);
                        }
                    });
                }
            });
        });
        
        console.log('FAQ functionality initialized');
    }
    
    // ============================================
    // PART 2: INTERACTIVE ELEMENTS
    // ============================================
    
    // Additional Interactive Features
    function initializeAdditionalFeatures() {
        // Add keyboard navigation for counter
        document.addEventListener('keydown', function(event) {
            const counterValue = document.getElementById('counter-value');
            let currentValue = parseInt(counterValue.textContent);
            
            switch(event.key) {
                case 'ArrowUp':
                case '+':
                    event.preventDefault();
                    document.getElementById('increment-btn').click();
                    break;
                case 'ArrowDown':
                case '-':
                    event.preventDefault();
                    document.getElementById('decrement-btn').click();
                    break;
                case '0':
                    if (event.ctrlKey) {
                        event.preventDefault();
                        document.getElementById('reset-button').click();
                    }
                    break;
            }
        });
        
        console.log('Additional interactive features initialized');
    }
    
    // ============================================
    // PART 3: FORM VALIDATION
    // ============================================
    
    // Form Validation System
    // Validates user input and provides real-time feedback
    function initializeFormValidation() {
        const form = document.getElementById('user-form');
        const nameInput = document.getElementById('name');
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const confirmPasswordInput = document.getElementById('confirm-password');
        const successMessage = document.getElementById('success-message');
        
        console.log('Form validation system initializing...');
        
        // Validation Functions
        
        /**
         * Validates the name field
         * @returns {boolean} True if name is valid
         */
        function validateName() {
            const name = nameInput.value.trim();
            const nameError = document.getElementById('name-error');
            const nameGroup = nameInput.closest('.form-group');
            
            // Remove any existing validation classes
            nameGroup.classList.remove('valid', 'invalid');
            
            // Validation logic: name must be at least 2 characters
            if (name.length < 2) {
                nameError.textContent = 'Please enter a valid name (at least 2 characters)';
                nameError.style.display = 'block';
                nameGroup.classList.add('invalid');
                return false;
            } else {
                nameError.style.display = 'none';
                nameGroup.classList.add('valid');
                return true;
            }
        }
        
        /**
         * Validates the email field using regex
         * @returns {boolean} True if email is valid
         */
        function validateEmail() {
            const email = emailInput.value.trim();
            const emailError = document.getElementById('email-error');
            const emailGroup = emailInput.closest('.form-group');
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            
            // Remove any existing validation classes
            emailGroup.classList.remove('valid', 'invalid');
            
            // Validation logic: must match email pattern
            if (!emailRegex.test(email)) {
                emailError.textContent = 'Please enter a valid email address (e.g., user@example.com)';
                emailError.style.display = 'block';
                emailGroup.classList.add('invalid');
                return false;
            } else {
                emailError.style.display = 'none';
                emailGroup.classList.add('valid');
                return true;
            }
        }
        
        /**
         * Validates the password field
         * @returns {boolean} True if password meets requirements
         */
        function validatePassword() {
            const password = passwordInput.value;
            const passwordError = document.getElementById('password-error');
            const passwordGroup = passwordInput.closest('.form-group');
            
            // Remove any existing validation classes
            passwordGroup.classList.remove('valid', 'invalid');
            
            // Validation logic: at least 8 chars with uppercase, lowercase, and number
            const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/;
            
            if (!passwordRegex.test(password)) {
                passwordError.textContent = 'Password must be at least 8 characters and contain uppercase, lowercase letters, and a number';
                passwordError.style.display = 'block';
                passwordGroup.classList.add('invalid');
                return false;
            } else {
                passwordError.style.display = 'none';
                passwordGroup.classList.add('valid');
                return true;
            }
        }
        
        /**
         * Validates that password confirmation matches
         * @returns {boolean} True if passwords match
         */
        function validateConfirmPassword() {
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            const confirmPasswordError = document.getElementById('confirm-password-error');
            const confirmPasswordGroup = confirmPasswordInput.closest('.form-group');
            
            // Remove any existing validation classes
            confirmPasswordGroup.classList.remove('valid', 'invalid');
            
            // Validation logic: confirm password must match original password
            if (password !== confirmPassword) {
                confirmPasswordError.textContent = 'Passwords do not match';
                confirmPasswordError.style.display = 'block';
                confirmPasswordGroup.classList.add('invalid');
                return false;
            } else if (confirmPassword === '') {
                confirmPasswordError.style.display = 'none';
                return false;
            } else {
                confirmPasswordError.style.display = 'none';
                confirmPasswordGroup.classList.add('valid');
                return true;
            }
        }
        
        // Real-time Validation Events
        // Validate fields as user types for immediate feedback
        
        nameInput.addEventListener('input', validateName);
        nameInput.addEventListener('blur', validateName);
        
        emailInput.addEventListener('input', validateEmail);
        emailInput.addEventListener('blur', validateEmail);
        
        passwordInput.addEventListener('input', function() {
            validatePassword();
            // Also validate confirm password when password changes
            if (confirmPasswordInput.value) {
                validateConfirmPassword();
            }
        });
        
        confirmPasswordInput.addEventListener('input', validateConfirmPassword);
        confirmPasswordInput.addEventListener('blur', validateConfirmPassword);
        
        // Form Submission Handler
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            console.log('Form submission attempted');
            
            // Validate all fields
            const isNameValid = validateName();
            const isEmailValid = validateEmail();
            const isPasswordValid = validatePassword();
            const isConfirmPasswordValid = validateConfirmPassword();
            
            // Check if all validations passed
            if (isNameValid && isEmailValid && isPasswordValid && isConfirmPasswordValid) {
                console.log('Form validation successful');
                
                // Show success message
                successMessage.style.display = 'block';
                successMessage.textContent = 'Form submitted successfully! Thank you for your submission.';
                
                // Create a simple animation for the success message
                successMessage.style.transform = 'scale(0.9)';
                setTimeout(() => {
                    successMessage.style.transform = 'scale(1)';
                }, 300);
                
                // Optional: Submit form data to server here
                // In a real application, you would send the data to a backend
                
                // Reset form after 3 seconds
                setTimeout(function() {
                    form.reset();
                    successMessage.style.display = 'none';
                    
                    // Remove validation classes
                    const formGroups = form.querySelectorAll('.form-group');
                    formGroups.forEach(group => {
                        group.classList.remove('valid', 'invalid');
                    });
                    
                    console.log('Form reset');
                }, 3000);
            } else {
                console.log('Form validation failed');
                
                // Scroll to first error
                const firstError = form.querySelector('.invalid');
                if (firstError) {
                    firstError.scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'center' 
                    });
                }
            }
        });
        
        console.log('Form validation system initialized');
    }
    
    // ============================================
    // INITIALIZATION
    // ============================================
    
    // Initialize all functionality when DOM is loaded
    function initializeAll() {
        console.log('Initializing all interactive features...');
        
        initializeThemeToggle();
        initializeCounter();
        initializeFAQ();
        initializeAdditionalFeatures();
        initializeFormValidation();
        
        console.log('All features initialized successfully!');
        
        // Display welcome message in console
        console.log(`
        ðŸ§  Interactive Web Page with JavaScript
        =====================================
        Features loaded:
        - Dark/Light mode toggle
        - Interactive counter with keyboard support
        - Collapsible FAQ section
        - Form validation with real-time feedback
        =====================================
        `);
    }
    
    // Start the application
    initializeAll();
});

// Additional utility functions that can be used throughout the application
const Utils = {
    /**
     * Debounce function to limit how often a function can be called
     * @param {Function} func - The function to debounce
     * @param {number} wait - The delay in milliseconds
     * @returns {Function} The debounced function
     */
    debounce: function(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    },
    
    /**
     * Check if an element is in the viewport
     * @param {Element} element - The element to check
     * @returns {boolean} True if element is in viewport
     */
    isInViewport: function(element) {
        const rect = element.getBoundingClientRect();
        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
        );
    },
    
    /**
     * Format a number with commas as thousands separators
     * @param {number} num - The number to format
     * @returns {string} The formatted number
     */
    formatNumber: function(num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
};

// Make Utils available globally for demonstration purposes
window.Utils = Utils;

